"""
二分查找的概念：
二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。
但是，折半查找要求线性表必须采用顺序存储结构，而且表中元素按关键字有序排列。

个人理解（大白话）：
现给定一个目标值和一个已排好序的列表（这里只是举例），在列表中查找这个目标值，我们可以怎么做呢？
1.依次遍历：
优势：不需要对表进行排序（说真的，当列表太大时，这个优势感觉可以忽略不计）
劣势：当列表太大时，很耗时！

2.二分查找：
优势：效率很高
劣势：有局限性，对无序表无计可施
当我们面对无序表时，如果想用到二分查找，我们可以用排序算法结合二分查找来使用
当然，还有其他的查找算法，后续我会持续更新！

查找过程：
 首先，假设一个列表中元素是按升序排列，将列表中间位置的元素与目标元素比较，如果两者相等，则查找成功；
 否则利用中间元素的下标值将表分成前、后两个子表，如果中间位置的元素大于目标元素，则进一步查找前半部分，
 否则进一步查找后半部分。重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，
 此时查找不成功

"""


def banary_search(nums, target):
    l, r = 0, len(nums) - 1
    while l <= r:   # 这里需要注意一下，如果去掉=，当目标值出现在nums[-1]时则不会被取到
        mid = (l + r) // 2
        if nums[mid] == target:  # 如果中间值等于目标值，则返回mid
            return mid
        elif nums[mid] > target:    # 如果中间值大于目标值说明目标值不会出现在右半边，则使‘右指针’指向中间值然后继续上述操作
            r = mid - 1     # 这是二分法的精髓所在
        else:
            l = mid + 1


s = banary_search([1, 2, 3, 4, 5, 6], 5)
print(s)
